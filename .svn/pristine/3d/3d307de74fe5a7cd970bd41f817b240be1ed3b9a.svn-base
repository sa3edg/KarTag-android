package com.kartag.gui;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.LinkedHashMap;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.facebook.AccessToken;
import com.facebook.LoggingBehavior;
import com.facebook.Request;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.SessionState;
import com.facebook.Settings;
import com.facebook.UiLifecycleHelper;
import com.facebook.model.GraphFriend;
import com.facebook.model.GraphUser;
import com.facebook.widget.LoginButton;
import com.kartag.client.processing.FacebookProcessor;
import com.kartag.controller.OrderCoordinator;
import com.kartag.controller.RequestFactory;
import com.kartag.core.handler.ImagesMemoryHandler;
import com.kartag.gui.presentation.AddTripScreen;
import com.kartag.gui.presentation.FeedbackScreen;
import com.kartag.gui.presentation.FrequencyList;
import com.kartag.gui.presentation.HaveArideScreen;
import com.kartag.gui.presentation.HomeScreen;
import com.kartag.gui.presentation.InboxScreen;
import com.kartag.gui.presentation.LoginScreen;
import com.kartag.gui.presentation.MessageDetails;
import com.kartag.gui.presentation.MyTripsScreen;
import com.kartag.gui.presentation.NeedArideScreen;
import com.kartag.gui.presentation.SettingScreen;
import com.kartag.gui.presentation.SplashScreen;
import com.kartag.gui.presentation.DateTimePickerDialog;
import com.kartag.gui.presentation.TripDetailsScreen;
import com.kartag.gui.presentation.TripsList;
import com.kartag.persistence.model.bo.Message;
import com.kartag.persistence.model.bo.Pool;
import com.kartag.persistence.model.bo.Setting;
import com.kartag.persistence.model.bo.Trip;
import com.kartag.persistence.model.bo.User;


public class MainActivity extends FragmentActivity {

	public static final String nextScreenParam = "nextScreenParam";

	private int screenId;
	public static final int SPLASH_ID = 0;
	public static final int LOGIN_ID = 1;
	public static final int HOME_ID = 2;
	public static final int HAVE_ARIDE_SCREEN_ID = 3;
	public static final int NEED_ARIDE_SCREEN_ID = 4;
	public static final int MY_TRIPS_SCREEN_ID = 5;
	public static final int TRIP_FREQUENCY_SCREEN_ID = 6;
	public static final int ADD_TRIP_SCREEN_ID = 7;
	public static final int TRIP_DETAILS_ID = 8;
	public static final int INBOX_ID = 9;
	public static final int MESSAGE_DETAILS_ID = 10;
	public static final int TRIP_LIST_ID = 11;
	public static final int FEEDBACK_ID = 12;
	public static final int SETTING_ID = 13;
	public static final int SENT_MESSAGE_ID = 14;
	
//	private UiLifecycleHelper uiHelper;
//	private static final String TAG = "MainFragment";
//
//	private Session.StatusCallback callback = new Session.StatusCallback() {
//	    @Override
//	    public void call(Session session, SessionState state, Exception exception) {
//	        onSessionStateChange(session, state, exception);
//	    }
//	};
//	

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
//		setContentView(R.layout.login2_layout);
//	    uiHelper = new UiLifecycleHelper(this, callback);
//	    uiHelper.onCreate(savedInstanceState);
//	    LoginButton authButton = (LoginButton) findViewById(R.id.authButton);
//	    authButton.setReadPermissions(Arrays.asList("user_likes", "user_status"));
		String key = "";
		try {
		    PackageInfo info = getPackageManager().getPackageInfo(
		            "com.kartag.gui", 
		            PackageManager.GET_SIGNATURES);
		    for (Signature signature : info.signatures) {
		        MessageDigest md = MessageDigest.getInstance("SHA");
		        md.update(signature.toByteArray());
		        Log.d("KeyHash:", Base64.encodeToString(md.digest(), Base64.DEFAULT));
		        key = Base64.encodeToString(md.digest(), Base64.DEFAULT);
		        }
		} catch (NameNotFoundException e) {
		 
		} catch (NoSuchAlgorithmException e) {
		 
		}
//		try
//		{
//		Signature[] sigs = getApplicationContext().getPackageManager().getPackageInfo(getApplicationContext().getPackageName(),PackageManager.GET_SIGNATURES).signatures;    
//		for (Signature sig : sigs)
//		{
//		    Log.i("App", "Signature : " + sig.hashCode());
//		    key += sig.hashCode() + "      ";
//		}
//		}
//		catch(Exception ex)
//		{
//			
//		}
//		AlertDialog.Builder builder = new AlertDialog.Builder(this);
//        builder.setMessage(key)
//               .setCancelable(false)
//               .setPositiveButton("OK", new DialogInterface.OnClickListener() {
//                   public void onClick(DialogInterface dialog, int id) {
//                	   finish();
//           	           Intent mainActivity = new Intent(getApplicationContext(), MainActivity.class);
//                       startActivity(mainActivity);
//                   }
//               });
//        AlertDialog alert = builder.create();
//        alert.show();
        
		ImagesMemoryHandler.initImageLoader(this);
		AbstractScreen screenToShow = null;
		screenId = getIntent().getIntExtra(nextScreenParam,
				SPLASH_ID);
		switch (screenId) {
		case SPLASH_ID:
			screenToShow = new SplashScreen(this);
			break;
		case LOGIN_ID:
			screenToShow = new LoginScreen(this);
			break;
		case HOME_ID:
			screenToShow = new HomeScreen(this);
			break;
		case HAVE_ARIDE_SCREEN_ID:
			screenToShow = new HaveArideScreen(this);
			break;
		case NEED_ARIDE_SCREEN_ID:
			screenToShow = new NeedArideScreen(this);
			break;
		case MY_TRIPS_SCREEN_ID:
			screenToShow = new MyTripsScreen(this, getIntent().getStringExtra("tripsType"));
			break;
		case TRIP_FREQUENCY_SCREEN_ID:
			screenToShow = new FrequencyList(this, getIntent().getStringExtra("tripType"));
			break;
		case ADD_TRIP_SCREEN_ID:
			screenToShow = new AddTripScreen(this,getIntent().getStringExtra("tripType"),  getIntent().getStringExtra("frequency"));
			break;
		case TRIP_DETAILS_ID:
			screenToShow = new TripDetailsScreen(this, (Trip)getIntent().getSerializableExtra("trip"));
			break;
		case INBOX_ID:
			screenToShow = new InboxScreen(this);
			break;
		case MESSAGE_DETAILS_ID:
			screenToShow = new MessageDetails(this, (Message)getIntent().getSerializableExtra("message"));
			break;
		case SENT_MESSAGE_ID:
			screenToShow = new MessageDetails(this, (GraphFriend)getIntent().getSerializableExtra("tripOwner"));
			break;
		case TRIP_LIST_ID:
			screenToShow = new TripsList(this, (Pool)getIntent().getSerializableExtra("pool"));
			break;
		case FEEDBACK_ID:
			screenToShow = new FeedbackScreen(this);
			break;
		case SETTING_ID:
			screenToShow = new SettingScreen(this);
			break;

		}

		screenToShow.loadScreen();

	}
	
	public FragmentActivity finishCurrentActivity(Activity activity)
	{
		activity.finish();
		return this;
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		getMenuInflater().inflate(R.menu.activity_main, menu);
		return true;
	}
	@Override
	public void onBackPressed()
	{
		if(screenId == MESSAGE_DETAILS_ID)
		{
			MessageDetails.updateHandler.removeCallbacks(MessageDetails.mUpdateTimeTask);
		}
		if(screenId == LOGIN_ID)
		{
			if(User.getInstance().getSetting() != null && User.getInstance().getSetting().getLogout().equals(Setting.ON))
			{
			   OrderCoordinator.handleOrder(null, RequestFactory.createFacebookLogOutRequest(this));
			}
		}
		super.onBackPressed();
	}
	

	
	  @Override
	  public void onActivityResult(int requestCode, int resultCode, Intent data) {
	      super.onActivityResult(requestCode, resultCode, data);
	      Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
	      if(screenId == ADD_TRIP_SCREEN_ID)
	      {
	    	  if (FacebookProcessor.pendingPublishReauthorization )//&& 
	    			 // Session.getActiveSession().getState().equals(SessionState.OPENED_TOKEN_UPDATED)) {
	    	  {
	    		  FacebookProcessor.pendingPublishReauthorization = false;
	    		  FacebookProcessor processor = new FacebookProcessor();
	    		  processor.setPostedMessage(FacebookProcessor.postedMessageCopy);
	    		  processor.publishStory();
	    	  }
	      }
//	      if(Session.getActiveSession().isOpened()) {
//	    	  Log.i("here opened", "thnx");
//	    	  
//	      }
//	      if(Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data) )
//	    	  {
//	    	    Intent intent = new Intent(this, MainActivity.class);
//				intent.putExtra(MainActivity.nextScreenParam, MainActivity.LOGIN_LOGGED_ID);
//				intent.putExtra("logged", true);
//				startActivity(intent);
//	    	  }
	  }
	  
//	  private void onSessionStateChange(Session session, SessionState state, Exception exception) {
//		  if (FacebookProcessor.pendingPublishReauthorization && 
//  		        state.equals(SessionState.OPENED_TOKEN_UPDATED)) {
//			  FacebookProcessor.pendingPublishReauthorization = false;
//  		    new FacebookProcessor().publishStory();
//  		}
//		}
	
//	@Override
//	public void onResume() {
//	    super.onResume();
//	    uiHelper.onResume();
//	}
//
//	@Override
//	public void onActivityResult(int requestCode, int resultCode, Intent data) {
//	    super.onActivityResult(requestCode, resultCode, data);
//	    uiHelper.onActivityResult(requestCode, resultCode, data);
//	}
//
//	@Override
//	public void onPause() {
//	    super.onPause();
//	    uiHelper.onPause();
//	}
//
//	@Override
//	public void onDestroy() {
//	    super.onDestroy();
//	    uiHelper.onDestroy();
//	}
//
//	@Override
//	public void onSaveInstanceState(Bundle outState) {
//	    super.onSaveInstanceState(outState);
//	    uiHelper.onSaveInstanceState(outState);
//	}
//	private void onSessionStateChange(Session session, SessionState state, Exception exception) {
//	    if (state.isOpened()) {
//	        Log.i(TAG, "Logged in...");
//	    } else if (state.isClosed()) {
//	        Log.i(TAG, "Logged out...");
//	    }
//	}
}
