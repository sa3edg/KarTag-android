package com.kartag.gui;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Menu;

import com.facebook.Session;
import com.facebook.model.GraphFriend;
import com.google.android.gcm.GCMRegistrar;
import com.kartag.controller.OrderCoordinator;
import com.kartag.controller.RequestFactory;
import com.kartag.gui.presentation.AddTripScreen;
import com.kartag.gui.presentation.FeedbackScreen;
import com.kartag.gui.presentation.FrequencyList;
import com.kartag.gui.presentation.HaveArideScreen;
import com.kartag.gui.presentation.HomeScreen;
import com.kartag.gui.presentation.InboxScreen;
import com.kartag.gui.presentation.LoginScreen;
import com.kartag.gui.presentation.MessageDetails;
import com.kartag.gui.presentation.MyTripsScreen;
import com.kartag.gui.presentation.NeedArideScreen;
import com.kartag.gui.presentation.SettingScreen;
import com.kartag.gui.presentation.SplashScreen;
import com.kartag.gui.presentation.TripDetailsScreen;
import com.kartag.gui.presentation.TripsList;
import com.kartag.notification.gcm.GCMIntentService;
import com.kartag.notification.gcm.WakeLocker;
import com.kartag.performance.ImagesMemoryHandler;
import com.kartag.persistence.model.bo.Message;
import com.kartag.persistence.model.bo.Pool;
import com.kartag.persistence.model.bo.Setting;
import com.kartag.persistence.model.bo.Trip;
import com.kartag.persistence.model.bo.User;

public class MainActivity extends FragmentActivity {

	public static final String nextScreenParam = "nextScreenParam";

	private int screenId;
	public static final int SPLASH_ID = 0;
	public static final int LOGIN_ID = 1;
	public static final int HOME_ID = 2;
	public static final int HAVE_ARIDE_SCREEN_ID = 3;
	public static final int NEED_ARIDE_SCREEN_ID = 4;
	public static final int MY_TRIPS_SCREEN_ID = 5;
	public static final int TRIP_FREQUENCY_SCREEN_ID = 6;
	public static final int ADD_TRIP_SCREEN_ID = 7;
	public static final int TRIP_DETAILS_ID = 8;
	public static final int INBOX_ID = 9;
	public static final int MESSAGE_DETAILS_ID = 10;
	public static final int TRIP_LIST_ID = 11;
	public static final int FEEDBACK_ID = 12;
	public static final int SETTING_ID = 13;
	public static final int SENT_MESSAGE_ID = 14;
	public static final int MY_TRIPS_DETAILS_SCREEN_ID = 15;

	private static MainActivity instance = null;

	public MainActivity() {
		instance = this;
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		ImagesMemoryHandler.initImageLoader(this);
		AbstractScreen screenToShow = null;
		screenId = getIntent().getIntExtra(nextScreenParam, SPLASH_ID);
		switch (screenId) {
		case SPLASH_ID:
			startPushNotification();
			screenToShow = new SplashScreen(this);
			break;
		case LOGIN_ID:
			screenToShow = new LoginScreen(this);
			break;
		case HOME_ID:
			screenToShow = new HomeScreen(this);
			break;
		case HAVE_ARIDE_SCREEN_ID:
			screenToShow = new HaveArideScreen(this);
			break;
		case NEED_ARIDE_SCREEN_ID:
			screenToShow = new NeedArideScreen(this);
			break;
		case MY_TRIPS_SCREEN_ID:
			screenToShow = new MyTripsScreen(this, getIntent().getStringExtra(
					"tripsType"));
			break;
		case TRIP_FREQUENCY_SCREEN_ID:
			screenToShow = new FrequencyList(this, getIntent().getStringExtra(
					"tripType"));
			break;
		case ADD_TRIP_SCREEN_ID:
			screenToShow = new AddTripScreen(this, getIntent().getStringExtra(
					"tripType"), getIntent().getStringExtra("frequency"));
			break;
		case TRIP_DETAILS_ID:
			screenToShow = new TripDetailsScreen(this, (Trip) getIntent()
					.getSerializableExtra("trip"));
			break;
		case INBOX_ID:
			screenToShow = new InboxScreen(this);
			break;
		case MESSAGE_DETAILS_ID:
			screenToShow = new MessageDetails(this, (Message) getIntent()
					.getSerializableExtra("message"));
			break;
		case SENT_MESSAGE_ID:
			screenToShow = new MessageDetails(this, (GraphFriend) getIntent()
					.getSerializableExtra("tripOwner"));
			break;
		case TRIP_LIST_ID:
			screenToShow = new TripsList(this, (Pool) getIntent()
					.getSerializableExtra("pool"));
			break;
		case FEEDBACK_ID:
			screenToShow = new FeedbackScreen(this);
			break;
		case SETTING_ID:
			screenToShow = new SettingScreen(this);
			break;
		case MY_TRIPS_DETAILS_SCREEN_ID:
			screenToShow = new TripDetailsScreen(this, (Trip) getIntent()
					.getSerializableExtra("trip"), true);
			break;

		}

		screenToShow.loadScreen();

	}

	private void startPushNotification() {
		// Make sure the device has the proper dependencies.
		GCMRegistrar.checkDevice(this);

		// Make sure the manifest was properly set - comment out this line
		// while developing the app, then uncomment it when it's ready.
		GCMRegistrar.checkManifest(this);
		registerReceiver(mHandleMessageReceiver, new IntentFilter(
				GCMIntentService.DISPLAY_MESSAGE_ACTION));

		// Get GCM registration id
		final String regId = GCMRegistrar.getRegistrationId(this);
		if (regId == null || "".equals(regId)) {
			// Registration is not present, register now with GCM          
			GCMRegistrar.register(this, GCMIntentService.SENDER_ID);
			GCMRegistrar.setRegisteredOnServer(this, true);
		} else {
			GCMRegistrar.setRegisteredOnServer(this, true);
			GCMIntentService.REG_ID = regId;
		}
		Log.i("REG_ID", GCMIntentService.REG_ID);
	}

	public static FragmentActivity finishCurrentActivity(Activity activity) {
		activity.finish();
		if (instance != null) {
			return instance;
		}
		return null;
	}

	public static FragmentActivity getActivity() {
		return instance;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		getMenuInflater().inflate(R.menu.activity_main, menu);
		return true;
	}

	@Override
	public void onBackPressed() {
		if (screenId == MESSAGE_DETAILS_ID) {
			MessageDetails.updateHandler
					.removeCallbacks(MessageDetails.mUpdateTimeTask);
		}
		if (screenId == LOGIN_ID) {
			if (User.getInstance().getSetting() != null
					&& User.getInstance().getSetting().getLogout()
							.equals(Setting.ON)) {
				OrderCoordinator.handleOrder(null,
						RequestFactory.createFacebookLogOutRequest(this));
			}
		}
		super.onBackPressed();
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		Session.getActiveSession().onActivityResult(this, requestCode,
				resultCode, data);
	}

	/**
	 ** Receiving push messages      *
	 */
	private final BroadcastReceiver mHandleMessageReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			//             String newMessage =
			// intent.getExtras().getString(EXTRA_MESSAGE);
			// Waking up mobile if it is sleeping
			WakeLocker.acquire(getApplicationContext());
			//              
			//             /**
			//              * Take appropriate action on this message
			//              * depending upon your app requirement
			//              * For now i am just displaying it on the screen
			//              * */
			//              
			//             // Showing received message
			//             lblMessage.append(newMessage + "\n");          
			//             Toast.makeText(getApplicationContext(),
			// "New Message: " + newMessage, Toast.LENGTH_LONG).show();
			//              
			// Releasing wake lock
			WakeLocker.release();
		}
	};

	@Override
	protected void onDestroy() {
		try {
			unregisterReceiver(mHandleMessageReceiver);
			GCMRegistrar.onDestroy(this);
		} catch (Exception e) {
			Log.e("UnRegister Receiver Error", "> " + e.getMessage());
		}
		super.onDestroy();
	}

}
