package com.kartag.gui.presentation;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.ScaleDrawable;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.Toast;

import com.kartag.client.common.Request;
import com.kartag.client.common.Response;
import com.kartag.client.processing.ResponseProcessingHelper;
import com.kartag.controller.OrderCoordinator;
import com.kartag.controller.RequestFactory;
import com.kartag.gui.AbstractScreen;
import com.kartag.gui.MainActivity;
import com.kartag.gui.R;
import com.kartag.persistence.dao.PersistenceSessionFactory;
import com.kartag.persistence.dao.bd.SettingDao;
import com.kartag.persistence.model.IModel;
import com.kartag.persistence.model.bo.Setting;
import com.kartag.persistence.model.bo.Trip;
import com.kartag.persistence.model.bo.User;

public class LoginScreen extends AbstractScreen {

	private Button login;
	public LoginScreen(FragmentActivity activity) {
		super(activity);
	}
	
	@Override
	public void loadScreen() {

		activity.requestWindowFeature(Window.FEATURE_NO_TITLE);
		activity.setContentView(R.layout.login_layout);
		
		login = (Button) activity.findViewById(R.id.loginbtn);
		Drawable drawable = activity.getResources().getDrawable(R.drawable.login);
		drawable.setBounds(0, 0, (int)(drawable.getIntrinsicWidth()*0.5), 
		                         (int)(drawable.getIntrinsicHeight()*0.5));
		ScaleDrawable sd = new ScaleDrawable(drawable, 0, 50, 35);
		login.setCompoundDrawables(sd.getDrawable(), null, null, null);
		login.setOnClickListener(new OnClickListener() {
        	 
			public void onClick(View arg0) {
				login();
			}
 
		});
		
		
		
	}
	@Override
	public void preExecution() {
		// TODO Auto-generated method stub
		//showProgressBar();
	}
	
	private void login()
	{
		//login.setEnabled(false);
		showProgressBar();
		OrderCoordinator.handleOrder(this,
				RequestFactory.createFacebookLoginRequest(activity));
	}

	@Override
	public void postExecution(Response response) {
		try
		{
		if (response.getRequestName().equals(Request.FB_LOGIN_ORDER)) {
			OrderCoordinator.handleOrder(this,
					RequestFactory.createFacebookGetFriendsRequest(activity));
		} else if (response.getRequestName().equals(
				Request.FB_GET_FRIENDS_ORDER)) {
			OrderCoordinator.handleOrder(this, RequestFactory
					.createLoginRequest(User.getInstance().getProfile()));
		} else if (response.getRequestName().equals(Request.ADD_USER_REQUEST)) {
			try {
				boolean added = (Boolean) ResponseProcessingHelper
						.getInstance().handleResponse(Request.ADD_USER_REQUEST,
								(String)response.getResponse());
				if (added) {
					showHomePage();
				}else
				{
					closeProgress();
					Toast.makeText(
							activity.getApplicationContext(),
							activity.getResources().getString(
									R.string.connectionError), Toast.LENGTH_SHORT)
							.show();
				}
				
			} catch (Exception ex) {
				
				closeProgress();
				Toast.makeText(
						activity.getApplicationContext(),
						activity.getResources().getString(
								R.string.connectionError), Toast.LENGTH_SHORT)
						.show();
			}
		}
		}
		catch(Exception ex)
		{
//			Log.e("Error", ex.getMessage());
//			if(User.getInstance().getProfile() != null && User.getInstance().getProfile().getFriends().size() > 0)
//			{
//				OrderCoordinator.handleOrder(this, RequestFactory
//						.createLoginRequest(User.getInstance().getProfile()));
//				//showHomePage();
//			}
//			else
//			{
				
				closeProgress();
				Toast.makeText(
						activity.getApplicationContext(),
						activity.getResources().getString(
								R.string.connectionError), Toast.LENGTH_SHORT)
						.show();
//			}
		}

	}
	private void showHomePage()
	{
		closeProgress();
		SettingDao dao = new SettingDao(PersistenceSessionFactory.createSessionInstance(activity).currentSession());
		Setting setting = (Setting)dao.get(new Setting());
		if(setting != null)
		{
			User.getInstance().setSetting(setting);
		}
		else
		{
			dao.store(new Setting(), null);
			User.getInstance().setSetting(new Setting());
		}
		Intent intent = new Intent(activity, MainActivity.class);
		intent.putExtra(MainActivity.nextScreenParam,
				MainActivity.HOME_ID);
		activity.startActivity(intent);
	}

}
